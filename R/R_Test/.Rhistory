verbatimTextOutput(outputId = "out_summary"),
tableOutput(outputId = "out_view")
)
)
)
server <- function(input, output, session) {
datasetInput <- reactive({
switch(input$in_dataset,
"v_rock" = rock,
"v_pressure" = pressure,
"v_cars" = cars)
})
output$out_caption <- renderText({
input$in_caption
})
output$out_summary <- renderPrint({
dataset<-datasetInput()
summary(dataset)
})
output$out_view <- renderTable({
head(datasetInput(), n=input$in_obs)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Shiny R 테스트"),
sidebarLayout(
sidebarPanel(
textInput(inputId = "in_caption",
label="caption",
value = "Data Summary"),
selectInput(inputId="in_dataset",
label="Choose a dataset",
choices = c("v_rock", "v_pressure", "v_cars")),
numericInput(inputId="in_obs",
label="Number....",
value=10),
img(src="test.png", width=20, height=100)
),
mainPanel(
textOutput(outputId = "out_caption"),
verbatimTextOutput(outputId = "out_summary"),
tableOutput(outputId = "out_view")
)
)
)
server <- function(input, output, session) {
datasetInput <- reactive({
switch(input$in_dataset,
"v_rock" = rock,
"v_pressure" = pressure,
"v_cars" = cars)
})
output$out_caption <- renderText({
input$in_caption
})
output$out_summary <- renderPrint({
dataset<-datasetInput()
summary(dataset)
})
output$out_view <- renderTable({
head(datasetInput(), n=input$in_obs)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Shiny R 테스트"),
sidebarLayout(
sidebarPanel(
textInput(inputId = "in_caption",
label="caption",
value = "Data Summary"),
selectInput(inputId="in_dataset",
label="Choose a dataset",
choices = c("v_rock", "v_pressure", "v_cars")),
numericInput(inputId="in_obs",
label="Number....",
value=10)
),
img(src="test.png", width=100, height=200),
mainPanel(
textOutput(outputId = "out_caption"),
verbatimTextOutput(outputId = "out_summary"),
tableOutput(outputId = "out_view")
)
)
)
server <- function(input, output, session) {
datasetInput <- reactive({
switch(input$in_dataset,
"v_rock" = rock,
"v_pressure" = pressure,
"v_cars" = cars)
})
output$out_caption <- renderText({
input$in_caption
})
output$out_summary <- renderPrint({
dataset<-datasetInput()
summary(dataset)
})
output$out_view <- renderTable({
head(datasetInput(), n=input$in_obs)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Shiny R 테스트"),
sidebarLayout(
sidebarPanel(
textInput(inputId = "in_caption",
label="caption",
value = "Data Summary"),
selectInput(inputId="in_dataset",
label="Choose a dataset",
choices = c("v_rock", "v_pressure", "v_cars")),
numericInput(inputId="in_obs",
label="Number....",
value=10),
img(src="test.png", width=100, height=200)),
mainPanel(
textOutput(outputId = "out_caption"),
verbatimTextOutput(outputId = "out_summary"),
tableOutput(outputId = "out_view")
)
)
)
server <- function(input, output, session) {
datasetInput <- reactive({
switch(input$in_dataset,
"v_rock" = rock,
"v_pressure" = pressure,
"v_cars" = cars)
})
output$out_caption <- renderText({
input$in_caption
})
output$out_summary <- renderPrint({
dataset<-datasetInput()
summary(dataset)
})
output$out_view <- renderTable({
head(datasetInput(), n=input$in_obs)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Shiny R 테스트"),
sidebarLayout(
sidebarPanel(
textInput(inputId = "in_caption",
label="caption",
value = "Data Summary"),
selectInput(inputId="in_dataset",
label="Choose a dataset",
choices = c("v_rock", "v_pressure", "v_cars")),
numericInput(inputId="in_obs",
label="Number....",
value=10),
img(src="test.jpg", width=100, height=200)
),
mainPanel(
textOutput(outputId = "out_caption"),
verbatimTextOutput(outputId = "out_summary"),
tableOutput(outputId = "out_view")
)
)
)
server <- function(input, output, session) {
datasetInput <- reactive({
switch(input$in_dataset,
"v_rock" = rock,
"v_pressure" = pressure,
"v_cars" = cars)
})
output$out_caption <- renderText({
input$in_caption
})
output$out_summary <- renderPrint({
dataset<-datasetInput()
summary(dataset)
})
output$out_view <- renderTable({
head(datasetInput(), n=input$in_obs)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Shiny R 테스트"),
sidebarLayout(
sidebarPanel(
textInput(inputId = "in_caption",
label="caption",
value = "Data Summary"),
selectInput(inputId="in_dataset",
label="Choose a dataset",
choices = c("v_rock", "v_pressure", "v_cars")),
numericInput(inputId="in_obs",
label="Number....",
value=10),
img(src="www/test.jpg", width=100, height=200)
),
mainPanel(
textOutput(outputId = "out_caption"),
verbatimTextOutput(outputId = "out_summary"),
tableOutput(outputId = "out_view")
)
)
)
server <- function(input, output, session) {
datasetInput <- reactive({
switch(input$in_dataset,
"v_rock" = rock,
"v_pressure" = pressure,
"v_cars" = cars)
})
output$out_caption <- renderText({
input$in_caption
})
output$out_summary <- renderPrint({
dataset<-datasetInput()
summary(dataset)
})
output$out_view <- renderTable({
head(datasetInput(), n=input$in_obs)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Shiny R 테스트"),
sidebarLayout(
sidebarPanel(
textInput(inputId = "in_caption",
label="caption",
value = "Data Summary"),
selectInput(inputId="in_dataset",
label="Choose a dataset",
choices = c("v_rock", "v_pressure", "v_cars")),
numericInput(inputId="in_obs",
label="Number....",
value=10),
img(src="test.jpg", width=100, height=200)
),
mainPanel(
textOutput(outputId = "out_caption"),
verbatimTextOutput(outputId = "out_summary"),
tableOutput(outputId = "out_view")
)
)
)
server <- function(input, output, session) {
datasetInput <- reactive({
switch(input$in_dataset,
"v_rock" = rock,
"v_pressure" = pressure,
"v_cars" = cars)
})
output$out_caption <- renderText({
input$in_caption
})
output$out_summary <- renderPrint({
dataset<-datasetInput()
summary(dataset)
})
output$out_view <- renderTable({
head(datasetInput(), n=input$in_obs)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Shiny R 테스트"),
sidebarLayout(
sidebarPanel(
textInput(inputId = "in_caption",
label="caption",
value = "Data Summary"),
selectInput(inputId="in_dataset",
label="Choose a dataset",
choices = c("v_rock", "v_pressure", "v_cars")),
numericInput(inputId="in_obs",
label="Number....",
value=10),
img(src="test.jpg", width=100, height=200)
),
mainPanel(
textOutput(outputId = "out_caption"),
verbatimTextOutput(outputId = "out_summary"),
tableOutput(outputId = "out_view")
)
)
)
server <- function(input, output, session) {
datasetInput <- reactive({
switch(input$in_dataset,
"v_rock" = rock,
"v_pressure" = pressure,
"v_cars" = cars)
})
output$out_caption <- renderText({
input$in_caption
})
output$out_summary <- renderPrint({
dataset<-datasetInput()
summary(dataset)
})
output$out_view <- renderTable({
head(datasetInput(), n=input$in_obs)
})
}
shinyApp(ui, server)
summary(diamonds)
library(ggplot2)
summary(diamonds)
by(diamonds$price, diamonds$cut, mean)
by(diamonds$price, diamonds$cut, sd)
by(diamonds$price, diamonds$cut, summary)
install.packages("psych")
library(psych)
describe(diamonds$price)
describe(diamonds$price, trim=0.05)
describeby(diamonds$price, diamonds$cut)
describe.by(diamonds$price, diamonds$cut)
summary(diamonds)
summary(diamonds$price)
str(diamonds)
attr(, "class")
by(diamonds$price, diamonds$cut, mean)
describeBy(diamonds$price, diamonds$cut)
by(diamonds$price, diamonds$cut, mean)
attr(by(diamonds$price, diamonds$cut, summary), "class")
describe(diamonds$price)
describe(diamonds$price, trim=0.01)
describe(diamonds$price, trim=0.1)
describe(diamonds$price, trim=0)
diamons[, c(1, 5:10)]
describe(diamons[, c(1, 5:10)])
describe(diamonds[, c(1, 5:10)])
diamonds[, c(1, 5:10)]
describeBy(diamonds$price, diamonds$cut)
diamonds[, 1]
diamonds[, c(1, 2)]
diamonds[, c(1, 2:3)]
diamonds
diamonds[, c(1, 5:10)]
table(diamonds$price)
prop.table(diamonds$price)
table(diamonds$cut, diamonds$color)
prop.table(table(diamonds$cut, diamonds$color))
prop.table(table(diamonds$cut, diamonds$color)) * 100
prop.table(table(diamonds$cut, diamonds$color), margin=1) * 100
# 열 백분율
prop.table(table(diamonds$cut, diamonds$color), margin=2) * 100
install.packages("gmodels")
library(gmodels)
CrossTable(diamonds$cut, diamonds$color, prop.r=TRUE)
CrossTable(diamonds$cut, diamonds$color, prop.r=FALSE)
# 교차표
table(diamonds$cut, diamonds$color)
# 전체 백분율
prop.table(table(diamonds$cut, diamonds$color)) * 100
# 행 백분율
prop.table(table(diamonds$cut, diamonds$color), margin=1) * 100
# 열 백분율
prop.table(table(diamonds$cut, diamonds$color), margin=2) * 100
# 교차표
table(diamonds$price, diamonds$color)
CrossTable(diamonds$cut, diamonds$color,
prop.r=TRUE, # 열백분율
prop.c=TRUE, # 행 백분율
prop.t = TRUE, #전체백분율
digits = 1
)
CrossTable(diamonds$cut, diamonds$color)
barplot(
table(diamonds$cut, diamonds$color)
)
barplot(
table(diamonds$cut, diamonds$color),
legend.text = levels(diamonds$cut), args.legend = list(x="topright") )
barplot(
table(diamonds$cut, diamonds$color), beside = TRUE,
legend.text = levels(diamonds$cut), args.legend = list(x="topright")   # 범례출력
)
barplot(
table(diamonds$cut, diamonds$color), beside = TRUE,
legend.text = levels(diamonds$cut), args.legend = list(x="topright")   # 범례출력
)
barplot(
table(diamonds$cut, diamonds$color),
beside = FALSE,  # 묶음 (기본: 누적 막대형)
legend.text = levels(diamonds$cut), args.legend = list(x="topright")   # 범례출력
)
barplot(
table(diamonds$cut, diamonds$color),
beside = TRUE,  # 묶음 (기본: 누적 막대형)
legend.text = levels(diamonds$cut), args.legend = list(x="topright")   # 범례출력
)
FALSE
barplot(
table(diamonds$cut, diamonds$color),
beside = FALSE,  # 묶음 (기본: 누적 막대형)
legend.text = levels(diamonds$cut), args.legend = list(x="topright")   # 범례출력
)
barplot(
table(diamonds$cut, diamonds$color),
beside = TRUE,  # 묶음 (기본: 누적 막대형)
legend.text = levels(diamonds$cut), args.legend = list(x="topright")   # 범례출력
)
barplot(
table(diamonds$cut, diamonds$color),
beside = TRUE,  # 묶음 (기본: 누적 막대형)
legend.text = levels(diamonds$cut), # 범례출력args.legend = list(x="topright")
)
barplot(
table(diamonds$cut, diamonds$color),
beside = TRUE,  # 묶음 (기본: 누적 막대형)
legend.text = levels(diamonds$cut), # 범례출력
args.legend = list(x="topright")   # 범례 위치
)
barplot(
table(diamonds$cut, diamonds$color),
beside = TRUE,  # 묶음 (기본: 누적 막대형)
legend.text = levels(diamonds$cut), # 범례출력
args.legend = list(x="topleft")   # 범례 위치
)
barplot(
table(diamonds$cut, diamonds$color),
beside = TRUE,  # 묶음 (기본: 누적 막대형)
legend.text = levels(diamonds$cut), # 범례출력
args.legend = list(x="topcenter")   # 범례 위치
)
barplot(
table(diamonds$cut, diamonds$color),
beside = TRUE,  # 묶음 (기본: 누적 막대형)
legend.text = levels(diamonds$cut), # 범례출력
args.legend = list(x="topright")   # 범례 위치
)
barplot(
table(diamonds$cut, diamonds$color),
beside = TRUE,  # 묶음 (기본: 누적 막대형)
legend.text = levels(diamonds$cut), # 범례출력
args.legend = list(x="bottomright")   # 범례 위치
)
barplot(
table(diamonds$cut, diamonds$color),
beside = TRUE,  # 묶음 (기본: 누적 막대형)
legend.text = levels(diamonds$cut), # 범례출력
args.legend = list(x="topright")   # 범례 위치
)
library(ggplot2)
plot(diamonds$carat, diamonds$price)
plot(diamonds[, c("x", "Y", "Z")])
pairs(diamonds[, c("x", "Y", "Z")])
plot(diamonds[, c("x", "y", "z")])
plot(diamonds[, c("x", "y", "z")])
pairs(diamonds[, c("x", "y", "z")])
pairs(diamonds[, c("x", "y", "z")])
install.packages("corrplot")
library(corrplot)
cor.result = cor(diamonds[, c("x", "Y", "Z")])
cor.result = cor(diamonds[, c("x", "y", "z")])
cor.result = cor(diamonds[, c("x", "y", "z")])
corrplot(cor.result, method = "circle")
corrplot(cor.result, method = "square")
corrplot(cor.result, method = "eclipse")
corrplot(cor.result, method = "number")
corrplot(cor.result, method = "shade")
corrplot(cor.result, method = "color")
corrplot(cor.result, method = "pie")
corrplot.mixed(cor.result)
install.packages("scatterplot3d")
library(scatterplot3d)
scatterplot3d(diamonds$x, diamonds$y, diamonds$z)
cor.result = cor(diamonds[, c("x", "y", "z")])
View(cor.result)
corrplot(cor.result, method = "circle")
corrplot(cor.result, method = "square")
corrplot(cor.result, method = "eclipse")
corrplot(cor.result, method = "number")
corrplot(cor.result, method = "shade")
corrplot(cor.result, method = "color")
corrplot(cor.result, method = "pie")
corrplot(cor.result, type = "full")
corrplot(cor.result, type = "upper")
corrplot(cor.result, type = "full")
corrplot(cor.result, type = "upper")
corrplot(cor.result, type = "lower")
corrplot(cor.result, method = "circle")
corrplot(cor.result, method = "square")
corrplot(cor.result, method = "eclipse")
corrplot(cor.result, method = "eclipse")
corrplot(cor.result, method = "ellipse")
corrplot(cor.result, method = "number")
corrplot(cor.result, method = "shade")
corrplot(cor.result, method = "color")
corrplot(cor.result, method = "pie")
corrplot.mixed(cor.result, lower="number", upper="circle")
scatterplot3d(diamonds$x, diamonds$y, diamonds$z)
install.packages("rgl")
library(rgl)
rgl::plot3d(diamonds$x, diamonds$y, diamonds$z)
rgl::plot3d(diamonds$x, diamonds$y, diamonds$z)
install.packages("Rcmdr")
library(Rcmdr)
scatter3d(diamonds$x, diamonds$y, diamonds$z)
